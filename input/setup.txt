bool parallel = 0      // specify the mode of computation. 0 - serial, 1 - parallel.

string canonical_problem = mixingLayer  // The type of the problem. Generally, use "general", other choices include jicf, mixingLayer

// Grid info
real gridScale = 1.98e-4    // grid scale(m)
int gridIsBinary = 1
int symmetric_conservative_metric = 0 // If we compute the metric and jacobian with a symmetric conservative form. 0-No, 2-2nd order, 4-4th order, 6-6th order

// controls
int initial = 0      // 0 - new case, 1 - continue from a previous case.
int total_step = 100000  // total number of steps
int output_file = 10000  // frequency of output files
int output_screen = 100 // frequency of screen output
int output_time_series = 0

// flow info.
// for mixing layer computations(problem type=1), specify the following info.
real ma_c = 0.35            // the convective Mach number Ma_c
real delta_omega = 1.98e-4     // the inlet vorticity thickness(m)
// real velocity_ratio = 1.5
bool compatible_mixing_layer = 0 // 1 - the mixing layer compatible as the Chen Qian's PhD thesis
struct upper_stream = {
    real mach = 1.5
    real temperature = 545
    real pressure = 94232.25
    real H2 = 0.05
    real N2 = 0.95
    real mixture_fraction = 1
    real ps1 = 1
    real ps2 = 1
    real ps3 = 1
    real ps4 = 1
}
struct lower_stream = {
    real temperature = 1475
    real pressure = 94232.25
    real O2 = 0.278
    real N2 = 0.55
    real H2O = 0.17
    real H = 5.6e-7
    real O = 1.55e-4
    real OH = 1.83e-3
    real HO2 = 5.1e-6
    real H2O2 = 2.5e-7
    real mixture_fraction = 0
    real ps1 = 0
    real ps2 = 0
    real ps3 = 0
    real ps4 = 0
}
bool upper_faster = 1   // 1 - upper stream has larger mach number, 0 - lower stream has larger mach number.

// numerics
// temporal scheme
bool steady = 0                         // 0 - unsteady, 1 - steady
real cfl = 1                          // CFL number
int     implicit_method = 1         // How to implicitly treat the ODE. 0 - Explicit integration; 1 - DPLUR
int     DPLUR_inner_step = 3        // If we use DPLUR, then we need a specified number of inner iterations.
real convergence_criteria = 1e-6    // The criteria of convergence
bool limit_flow = 0

int	 temporal_scheme = 3                // Temporal scheme for transient sims: 2-Dual-time iteration with DPLUR; 3-SSPRK
bool fixed_time_step   = 0              // If the time step is fixed(1), then the time step should be given; otherwise(0), the time step is determined by CFL number.
real dt = 1e-9                          // In unsteady simulation, the time step should be given
real     n_flowThroughTime = 2               // The number of flow-through time for the unsteady simulation
real    domain_length   = 0.11286            // The length of the domain in the x direction, which is used to compute the flow-through time

// spatial discretization
string hybrid_inviscid_scheme = UD7+WENO7	// UD7+WENO7
int inviscid_scheme = 72               // 2 - Roe, 3 - AUSM+, 4 - HLLC, 51 - WENOZ5-cp, 52 - WENOZ5-ch
bool positive_preserving = 1            // If the Positive-preserving limiter is activated, only implemented for 51/52
int viscous_order = 0                   // Default: 2nd order central discretization. Other choices: 0(inviscid)
int shock_sensor = 1                     // 0 - Modified Ducros sensor; 1 - Modified Jameson sensor; 2 - Sensor based on density and pressure jump
real shockSensor_threshold = 0.1        // The threshold for the shock sensor
real shockSensor_epsilon = 5.938329e+12 // The epsilon for the shock sensor, usually computed by (U_ref/L_ref)^2

// chemical info
int species = 1  // If there is species involved. 0 - Air as perfect gas; 1 - Species involved; 2 - Species + mixture fraction + mixture fraction variance are solved
int reaction = 1 //0-No reaction; 1-Finite rate chemistry; 2-Flamelet model. Even no reactions are involved, the mechanism file should exit to clarify the species
string mechanism_file = chemistry/H2_mech.inp  // 2004-Li-IntJ.Chem.Kinet.inp

// turbulent sim info
bool turbulence = 0 // 0 - laminar/DNS, 1 - turbulent

// bc info
array string boundary_conditions {
 freestream outflow  periodic
}
string  reference_state =   freestream // Specify the reference state for the simulation. The reference state is used to calculate the stagnation enthalpy and the stagnation pressure.
struct  freestream {
    string  type            =   inflow
    int     label           =   5
    int     inflow_type     =   1   // 0 for constant inflow, 1 for profile inflow, 2 for mixing-layer-type inflow, other types may be added(such as 3 for self-similar inflow)
    int     fluctuation_type    =  1       // Specify the type of fluctuation. 0 for no fluctuation, 1 for fluctuation in velocity with white noise.
    real    fluctuation_intensity    =   0.04    // Specify the intensity of fluctuation in velocity. The intensity is defined as the ratio of the standard deviation of the fluctuation to the mean value of the velocity.
}
struct outflow {
    string type = outflow
    int label   =   6
}
struct periodic  {
    string type = periodic
    int label = 8
}

// fluctuation info
int random_number_per_point = 2 // 0 - no fluctuation, 1 - one random number per point, 2 - two random numbers per point, etc.
int fluctuation_variable_number = 1 // The number of variables that are fluctuated.
int fluctuation_form = 1 // 1 - The fluctuation of Ferrer et,al.
int N_spanwise_waves = 3 // The number of spanwise waves in the fluctuation
real fluctuation_intensity = 0.04 // The intensity of the fluctuation
real x0 = 7.92e-4
real y0 = 0
real z0 = 0

// Additional passive scalar
int n_ps = 0 // number of additional scalars
array real sc_passive_scalar {
    0.2 0.5 1.0 1.5
}
array real sct_passive_scalar {
    1 1 1 1
}

// statistical choice
bool if_collect_statistics = 1
bool if_continue_collect_statistics = 0
// stat choice
array string stat_rey_1st {
    u v w T
}
bool rho_p_correlation = 0
bool stat_tke_budget = 1
array string stat_species {
    all     // If "all" is specified, then all species are monitored.
    // H2 O2 N2
}
bool stat_species_velocity_correlation = 1
bool stat_species_dissipation_rate = 1

// monitor info
// The slices should in form of the block file, where one of the indices is fixed.
int if_monitor_blocks = 0 // Monitor some blocks
string monitor_block_file = input/monitor_blocks.txt
int monitor_block_frequency = 100
array string monitor_block_var {
    u   v  w  pressure	temperature
}

array string available_field_var {
 shocksensor
}
